/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package principal;

/**
 *
 * @author Pc
 */

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.util.List;
import principal.Documento;
import principal.Postulante;
import principal.PostulanteDAO;
import principal.panelDatos;
import principal.panelDocumentos;
import principal.panelInscripcion;
import principal.panelResultado;

public class DashboardFrame extends javax.swing.JFrame {
    
   
  private final PostulanteDAO dao = new PostulanteDAO();
    private final int postulanteId = 1; // reemplaza por el id actual

    public DashboardFrame() {
        initComponents();
        // inicializaciones
        tblDocumentos.setModel(new DefaultTableModel(new Object[]{"Documento","Estado"}, 0));
        progressDocumentos.setMinimum(0);
        progressDocumentos.setMaximum(1);
        loadDashboardData(postulanteId);
    }

    private void loadDashboardData(int id) {
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        SwingWorker<Void, Void> worker = new SwingWorker<>() {
            Postulante p;
            List<Documento> docs;
            String resultado = "pendiente";
            int totalDocs = 0, completedDocs = 0;
            @Override
            protected Void doInBackground() {
                p = dao.getPostulanteById(id);
                docs = dao.getDocumentosByPostulante(id);
                resultado = dao.getUltimoResultado(id);
                int[] prog = dao.getProgresoDocumentos(id);
                totalDocs = prog[0];
                completedDocs = prog[1];
                return null;
            }
            @Override
            protected void done() {
                try {
                    if (p != null) {
                        lblNombre.setText(p.getNombre());
                        lblCI.setText(p.getCi());
                        lblCorreo.setText(p.getCorreo());
                        lblCarrera.setText(p.getCarrera());
                    } else {
                        lblNombre.setText("No encontrado");
                    }
                    DefaultTableModel model = (DefaultTableModel) tblDocumentos.getModel();
                    model.setRowCount(0);
                    if (docs != null) {
                        for (Documento d : docs) {
                            model.addRow(new Object[]{d.getNombreDocumento(), d.getEstado()});
                        }
                    }
                    progressDocumentos.setMaximum(Math.max(1, totalDocs));
                    progressDocumentos.setValue(completedDocs);
                    progressDocumentos.setStringPainted(true);
                    progressDocumentos.setString(completedDocs + " / " + totalDocs);

                    String r = (resultado == null) ? "pendiente" : resultado.toLowerCase();
                    if ("admitido".equals(r)) {
                        lblResultado.setText("ADMITIDO");
                        lblResultado.setForeground(new Color(0,128,0));
                    } else if ("no admitido".equals(r) || "no_admitido".equals(r)) {
                        lblResultado.setText("NO ADMITIDO");
                        lblResultado.setForeground(Color.RED);
                    } else { 
                        lblResultado.setText("PENDIENTE");
                        lblResultado.setForeground(Color.GRAY);
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(DashboardFrame.this, "Error: " + ex.getMessage());
                    ex.printStackTrace();
                } finally {
                    DashboardFrame.this.setCursor(Cursor.getDefaultCursor());
                }
            }
        };
        worker.execute();
    }
     

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Documento", "Estado"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new Inicio().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
